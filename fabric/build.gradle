plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.jetbrains.kotlin.jvm' version '1.7.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.21'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modImplementation("net.fabricmc:fabric-language-kotlin:1.8.4+kotlin.1.7.20")
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    modImplementation("maven.modrinth:lithium:mc1.19.2-0.8.3")
    modImplementation("maven.modrinth:sodium:mc1.19.2-0.4.4")
    modImplementation("maven.modrinth:sodium-extra:mc1.19.2-0.4.10")
    modImplementation("maven.modrinth:reeses-sodium-options:mc1.19.2-1.4.7")
    modImplementation("maven.modrinth:lazydfu:0.1.3")
    modImplementation("maven.modrinth:ferrite-core:5.0.0-fabric")
    modImplementation("maven.modrinth:modmenu:4.0.6")
    modImplementation("maven.modrinth:wthit:quilt-5.12.0")
    modImplementation("maven.modrinth:badpackets:fabric-0.2.0")

    modImplementation("maven.modrinth:dashloader:4.1.3+1.19")
    implementation 'dev.quantumfusion:Taski:1.1.0'
    implementation 'dev.quantumfusion:Hyphen:0.2.2'
    implementation 'com.github.luben:zstd-jni:1.5.2-5'

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
repositories {
    mavenCentral()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
